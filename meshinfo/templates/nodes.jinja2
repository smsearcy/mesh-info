{% extends "includes/section.jinja2" %}

{% block head %}
  {# Stylesheet for Grid.js #}
  <link rel="stylesheet" href="{{ req.static_url('meshinfo:static/css/mermaid.min.css') }}">
{% endblock %}

{% block title %}Nodes{% endblock %}

{% block content %}
<div class="container is-fluid">
  <h1 class="title">Nodes</h1>
  <div class="has-text-right">
    <a href="{{ req.route_url("nodes", view="csv") }}">Export Data to CSV</a>
  </div>
  <div id="node-table"></div>
</div>
{% endblock %}

{% block javascript %}
  <script src="{{ req.static_url('meshinfo:static/js/gridjs.umd.js') }}"></script>
  <script>
    new gridjs.Grid({
      columns: [
        {
          name: 'URL',
          hidden: true
        },
        {
          name: 'Name',
          formatter: (cell, row) => gridjs.html(`<a href='${row.cells[0].data}'>${cell}</a>`)
        },
        'WLAN IP',
        'Status',
        'SSID',
        'Band',
        'Links',
        'Tunnels',
        {
          name: 'Firmware',
          sort: {
            compare: (a, b) => {
              const a_parts = a.replace('develop-', '').split(/[-.]/);
              const b_parts = b.replace('develop-', '').split(/[-.]/);

              let i = 0;
              while (i < Math.min(a_parts.length, b_parts.length)) {
                let a_part = parseInt(a_parts[i], 10);
                let b_part = parseInt(b_parts[i], 10);
                if (a_part > b_part) {
                  return 1;
                } else if (b_part > a_part) {
                  return -1;
                }
                i++;
              }
              return 0;
            }
          }
        },
        {
          name: 'Up Time',
          sort: false
        },
        'Last Seen'
      ],
      style: {
        table: {
          'white-space': 'nowrap'
        }
      },
      pagination: {
        limit: 25
      },
      search: true,
      sort: true,
      data: [
        {% for node in nodes %}
          [
            '{{ req.route_url("node-details", id=node.id) }}',
            '{{ node.display_name }}',
            '{{ node.wlan_ip }}',
            '{{ node.status }}',
            '{{ node.ssid }}',
            '{{ node.band }}',
            '{{ node.link_count }}',
            '{{ node.active_tunnel_count }}',
            '{{ node.firmware_version }}',
            '{{ node.up_time }}',
            '{{ node.last_seen|client_tz }}'
          ]{% if not loop.last %},{% endif %}
        {% endfor %}
      ],
      className: {
        table: 'table is-striped is-narrow'
      }
    }).render(document.querySelector("#node-table"));
  </script>
{% endblock %}
